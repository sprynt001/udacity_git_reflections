When would you want to use a remote repository rather than keeping all your work local? (answered 23/05/2015)

I would want to use a remote repository for two main reasons. The first is to allow my code to be accessible e.g. if I am sharing with other people or if I am working from different computers.
The second reason is backup. If the reposirtory is located remotely (e.g. on github) then I have a more reliably backed up copy than that on my local computer.
======================================================================

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository? (answered 23/05/2015)

Doing the push/pull manually allows the user to retain control of the state of the repository. I would not want something someone else is working on to be introduced to what I am doing without my explicit knowledge. Also If I have some software e.g. Python code, I would want to be in control of the versions I am using. It also means I would know when/what to merge (How will merging work for automatic pulls) and finally, I could take a look at what has been updated on the repository and pick and choose what to pull.
======================================================================

Describe the differences between forks, clones and branches. When would you use one instead of another?

Forks are copies of a repository made through the Github site and which create their copy on Github (as an origin?). The creation process keeps track of whom you forked the repository from and acknowledges them. Clones are copies of repositories usually made to a local machine (from a remote like github for instance) I think you may be allowed to check in commits to the repository you cloned from? Branches are a separate strand of development with its own commit history in a repository. Forking and cloning create new repositories, but branching does not.

I would use a fork if I wanted to actively work on a repository that I did not have the rights to commit to, or I wanted to make wholesale changes to the repository. I have used cloning to create local copies of repositories (mine and those of other people). Branching is useful when working on a separate strand of development within a repository - e.g. exploring adding a new feature, that you do not want to impact on the main work being done on the code in the repository.
======================================================================

What is the benefit of having a copy of the last known state of the remote stored locally?

The main benefit of this is to allow a user to know if their branch is ahead or behind the remote branch (master?) even when the user is offline.
======================================================================

How would you collaborate without using Git/Github? What would be easier and what would be harder?

I would collaborate without using Github by using SVN which I have used in the past. The only thing I think will be really different is the fact that I would not be able to do commits to the repository 'offline'. However, if the question was more general about collaborating without using a version control system, then it would involve manually zipping up code to share and inspecting files for changes - e.g. using diff tools. And a lot of manual merging.

If this was to be done only once or twice it may not be a huge problem, but if it is an ongoing project then it is not practical to do this manually over a long period. The main difficulties with using Github are the learning curve and the need to access the central repository. However, the fact that it is a distributed version control system mitigates the second point and also gives a lot of flexibility for collaboration - especially in regions where internet access may be poor.
======================================================================

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I would use a separate branch in a number of scenarios - e.g. when working on a new strand of work or carrying out a bug fix. In general, anything that may interfere with master and disrupt it. This gives a great deal of flexibility in allowing separate strands of work to occur in parallel and also allow exploratory work without fear of damaging the master code.
