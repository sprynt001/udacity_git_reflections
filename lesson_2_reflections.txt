What happens when you initialise a repository? Why do you need to do it?

    Answer (Monday 11 May 2015)
    When you initialise a repository git creates a hidden directory containing metadata about all the files in the repository. The contents of this directory are updated on each commit as files are added removed and changed.

    Initialisation is needed to create the repository and let git know that it needs to start tracking the contents of the directory.
======================================================================

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area holds files that will be committed in the next commit. It therefore contains a subset of files in the working directory and the changes in the files in the staging area have not yet been saved to the repository.

The advantage of having a staging area is that we can ensure we have all the things we want to commit before making the commit. If necessary we can add and remove from it without making our repository log messy.

It seems that it is the version of the file that is put in the staging area that will be committed. i.e. if the file is changed after it is added to the staging area, it is the version from the staging area that will be committed!
======================================================================

How can you use the staging area to make sure you have one commit per logical change?

I can use the staging area to ensure I have one commit per logical change by examining the changes that have been made to files in the working directory compared to those in the staging area. I can therefore ensure only the files related to a logical change have been staged, and I can also ensure I do not miss out any files involved in the logical change.
======================================================================

What are some situations when branches will be helpful in keeping your history organised? How would branches help?

The main situation where branches will be helpful in keeping a repository's history organised is when we want to try some extensive experimental developments. In this case a branch can be created to allow the new things to be developed without affecting the master branch.
======================================================================

How do the diagrams help you visualize the branch structure?

Diagrams allow two main features of the repository to be seen clearly:
1) Commits made are visible in a directed graph structure
2) Any commits not 'reachable' because they are not part of a branch can be seen
======================================================================

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together creates a commit that contains the changes made in both branches. 

They are represented schematically to show that the code diverged at some point and followed independent tracks which are brought together during the merge operation to create the unified version with changes from both branches.
======================================================================

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Git's automatic merging is very basic and this means if the changes in the commits being merged are easily separable it goes ahead and merges, but if there is a chance of ambiguity it does not. This creates less work for programmers when clearly separable changes have been made.

The main con of the automatic merging is that if there is any chance of ambiguity - same region of code is changed in both files, then it does not merge the region. It does not even try to investigate the nature of the changes. This can also be viewed as a good thing as it minimises the chance of introducing errors.

Another pro is that in the case of conflicts it allows them to be identified easily by showing the sections from both commits clearly.
